---
title: "Spatially Explicit Stratified Power Model"
output: rmarkdown::html_vignette
vignette: >
  %\VignetteIndexEntry{sesp}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  fig.path = "man/figures/sesp/",
  fig.dpi = 150
)
```

## Install and load R packages

```r
install.packages(c("sf","gdverse"), dep = T)
# install.packages("devtools")
devtools::install_github("ausgis/sesp",
                         build_vignettes = TRUE,
                         dep = TRUE)
```


```{r}
library(sf)
library(sesp)
library(gdverse)
```

## Equivalence of Q Values in the Native Geographical Detector and Linear Regression Framework

```{r}
NTDs = sf::st_as_sf(gdverse::NTDs, coords = c('X','Y'))

system.time({
go1 = sesp(incidence ~ ., data = NTDs, discvar = 'none',
           model = 'ols', overlay = 'intersection')
})

system.time({
go2 = gd(incidence ~ ., data = NTDs,
         type = c('factor','interaction'))
})
```

### Factor detector

```{r}
go1$factor
go2$factor
```

### Interaction detector

```{r}
go1$interaction
go2$interaction
```

## Spatially Explicit Stratified Power Model Under The Linear Regression Framework

Using the same data as [the gdverse idsa vignette](https://stscl.github.io/gdverse/articles/idsa.html):

```{r}
depression = system.file('extdata/Depression.csv',package = 'gdverse') |>
  readr::read_csv() |>
  sf::st_as_sf(coords = c('X','Y'), crs = 4326)
depression
```

### SESP With Linear Regression

```{r}
system.time({
  g1 = sesp(Depression_prevelence ~ ., data = depression,
            model = 'ols', overlay = 'intersection', cores = 8)
})
g1
plot(g1,slicenum = 3)
```

### SESP With Spatial Lag Regression

```{r}
system.time({
  g2 = sesp(Depression_prevelence ~ .,
            data = depression,
            model = 'lag', cores = 8)
})
g2
```

### SESP With Spatial Error Regression

```{r}
system.time({
  g3 = sesp(Depression_prevelence ~ .,
            data = depression,
            model = 'error', cores = 8)
})
g3
```

### SESP With Spatial Durbin Regression

```{r}
system.time({
  g4 = sesp(Depression_prevelence ~ ., data = depression,
            model = 'lag', durbin = TRUE, cores = 8)
})
g4
```

### SESP With Geographically Weighted Regression

```{r}
system.time({
  g5 = sesp(Depression_prevelence ~ .,
            data = depression,
            model = 'gwr', cores = 8)
})
g5
```

### Results of optimal spatial discretization

```{r}
plot_optdisc = \(g){
 gmap = sf::st_set_geometry(g$optdisc,sf::st_geometry(depression))

 fig1 = seq_along(g$optdisc) |>
   purrr::map(\(.x) ggplot2::ggplot(data = gmap) +
                ggplot2::geom_sf(ggplot2::aes(color = factor(g$optdisc[,.x,drop = TRUE])),
                                 alpha = .65, size = 0.5) +
                ggplot2::labs(color = 'zones') +
                ggplot2::theme_void() +
                ggplot2::theme(
                  legend.position = "none")
                ) %>%
   patchwork::wrap_plots(ncol = 3, byrow = TRUE) +
   patchwork::plot_annotation(
     tag_levels = 'a',
     tag_prefix = '(',
     tag_suffix = ')',
     tag_sep = '',
     theme = ggplot2::theme(plot.tag = ggplot2::element_text(family = "serif"),
                            plot.tag.position = "topleft"))
 return(fig1)
}
```

```{r optdisc1,fig.width=6.5,fig.height=7,fig.cap=knitr::asis_output("**Figure 6**. Optimal spatial discretization result with linear regression operator. Subfigures (a)–(j) depict the optimal spatial discretizations for the variables PopulationDensity, Population65, NoHealthInsurance, Neighbor_Disadvantage, Beer, MentalHealthPati, NatureParks, Casinos, DrinkingPlaces, and X.HouseRent, respectively.")}
plot_optdisc(g1)
```

```{r optdisc2,fig.width=6.5,fig.height=7,fig.cap=knitr::asis_output("**Figure 7**. Optimal spatial discretization result with spatial lag regression operator. Subfigures (a)–(j) depict the optimal spatial discretizations for the variables PopulationDensity, Population65, NoHealthInsurance, Neighbor_Disadvantage, Beer, MentalHealthPati, NatureParks, Casinos, DrinkingPlaces, and X.HouseRent, respectively.")}
plot_optdisc(g2)
```

```{r optdisc3,fig.width=6.5,fig.height=7,fig.cap=knitr::asis_output("**Figure 8**. Optimal spatial discretization result with spatial error regression operator. Subfigures (a)–(j) depict the optimal spatial discretizations for the variables PopulationDensity, Population65, NoHealthInsurance, Neighbor_Disadvantage, Beer, MentalHealthPati, NatureParks, Casinos, DrinkingPlaces, and X.HouseRent, respectively.")}
plot_optdisc(g3)
```

```{r optdisc4,fig.width=6.5,fig.height=7,fig.cap=knitr::asis_output("**Figure 9**. Optimal spatial discretization result with spatial durbin regression operator. Subfigures (a)–(j) depict the optimal spatial discretizations for the variables PopulationDensity, Population65, NoHealthInsurance, Neighbor_Disadvantage, Beer, MentalHealthPati, NatureParks, Casinos, DrinkingPlaces, and X.HouseRent, respectively.")}
plot_optdisc(g4)
```

```{r optdisc5,fig.width=6.5,fig.height=7,fig.cap=knitr::asis_output("**Figure 10**. Optimal spatial discretization result with geographically weighted regression operator. Subfigures (a)–(j) depict the optimal spatial discretizations for the variables PopulationDensity, Population65, NoHealthInsurance, Neighbor_Disadvantage, Beer, MentalHealthPati, NatureParks, Casinos, DrinkingPlaces, and X.HouseRent, respectively.")}
plot_optdisc(g5)
```
