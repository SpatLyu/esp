// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ArmaRunique
arma::ivec ArmaRunique(const arma::ivec& x);
RcppExport SEXP _esp_ArmaRunique(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::ivec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ArmaRunique(x));
    return rcpp_result_gen;
END_RCPP
}
// ArmaDummyMat
arma::mat ArmaDummyMat(const arma::imat& mat);
RcppExport SEXP _esp_ArmaDummyMat(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(ArmaDummyMat(mat));
    return rcpp_result_gen;
END_RCPP
}
// PredictDummyY
arma::mat PredictDummyY(const arma::imat& mat, const arma::vec& vec);
RcppExport SEXP _esp_PredictDummyY(SEXP matSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(PredictDummyY(mat, vec));
    return rcpp_result_gen;
END_RCPP
}
// CalculateQ
Rcpp::NumericVector CalculateQ(const arma::mat& y_pred, const arma::imat& discmat, const arma::vec& y);
RcppExport SEXP _esp_CalculateQ(SEXP y_predSEXP, SEXP discmatSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y_pred(y_predSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type discmat(discmatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(CalculateQ(y_pred, discmat, y));
    return rcpp_result_gen;
END_RCPP
}
// SLMQ
Rcpp::NumericVector SLMQ(const arma::imat& levelmat, const arma::imat& dummymat, const arma::vec& coefs, const arma::vec& y);
RcppExport SEXP _esp_SLMQ(SEXP levelmatSEXP, SEXP dummymatSEXP, SEXP coefsSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::imat& >::type levelmat(levelmatSEXP);
    Rcpp::traits::input_parameter< const arma::imat& >::type dummymat(dummymatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type coefs(coefsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(SLMQ(levelmat, dummymat, coefs, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_esp_ArmaRunique", (DL_FUNC) &_esp_ArmaRunique, 1},
    {"_esp_ArmaDummyMat", (DL_FUNC) &_esp_ArmaDummyMat, 1},
    {"_esp_PredictDummyY", (DL_FUNC) &_esp_PredictDummyY, 2},
    {"_esp_CalculateQ", (DL_FUNC) &_esp_CalculateQ, 3},
    {"_esp_SLMQ", (DL_FUNC) &_esp_SLMQ, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_esp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
